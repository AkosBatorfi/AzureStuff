//LA - Showing latest heartbeat of systems in workspace
Heartbeat
| summarize LastCall = max(TimeGenerated) by Resource

//LA -  Missing critical security updates all
Update
|where  OSType != "Linux" and UpdateState == "Needed" and Optional == "false" and (Classification == "Security Updates" or Classification == "Critical Updates") 
| project TimeGenerated, Resource, Title, Classification,KBID, PublishedDate
| sort by TimeGenerated desc

//LA - Missing critical and security updates listed per VM
Update
|where  OSType != "Linux" and UpdateState == "Needed" and Optional == "false" and (Classification == "Security Updates" or Classification == "Critical Updates") 
| summarize UpdatesNeeded=makeset(Title), Updates=dcount(Title), makeset(KBID) by Computer

//LA - Antimalware status per computer
ProtectionStatus
| summarize arg_max(TimeGenerated, ProtectionStatus, ProtectionStatusDetails) by Computer

//LA - Events per distinct computer
Event
| summarize count() by Computer
| distinct Computer, count_ 

//LA - Errors and warnings on Domain controllers
Event 
| where Computer contains "ADS" and EventLevelName in ("Warning", "Error")
| distinct Computer, EventLog, EventID, RenderedDescription

//LA - Expiring certificates
Event
| where RenderedDescription has "certificate will expire" or RenderedDescription has "is about to expire or already expired"
| distinct Computer, EventLog, EventID, RenderedDescription

//ARG - Show subscriptions with Azure ASC default policy
policyresources
| where type == "microsoft.authorization/policyassignments"
| extend defId = properties.policyDefinitionId
| where defId == "/providers/Microsoft.Authorization/policySetDefinitions/1f3afdf9-d0c9-4c3d-847f-89da613e70a8"
| project subscriptionId, name, Title=properties.displayName, scope=properties.scope, properties


//ARG - Active Azure Security Center alerts showing different alerts.
securityresources
| where type =~ 'microsoft.security/locations/alerts'
| where properties.Status in ('Active')
| extend TimeGeneratedUtc= properties.TimeGeneratedUtc
| sort by tostring(TimeGeneratedUtc)
| project TimeGeneratedUtc,subscriptionId, resourceGroup, Severity = properties.Severity, Alert = properties.AlertDisplayName, Intent = properties.Intent

//LA - showing Updates from the last month
UpdateRunProgress 
| where TimeGenerated > ago(30d)
| where UpdateRunName != "AV Definitions"
//| where InstallationStatus !in("NotIncluded", "Succeeded")
| summarize arg_max(TimeGenerated, UpdateRunName, InstallationStatus, Computer, Title) by Computer

//LA - showing Free space and % free space, showing the lowest space on top
Perf
| where TimeGenerated > ago(2h) 
| where CounterName == "% Free Space" and InstanceName == "C:"
| project  TimeGenerated, Computer, Free_Percent = CounterValue
| join kind= inner (
Perf
| where TimeGenerated > ago(2h) 
| where CounterName == "Free Megabytes" and InstanceName == "C:"
| project TimeGenerated , Computer, Free_MB=CounterValue
) on Computer
| summarize arg_max(TimeGenerated, Free_Percent, Free_MB) by Computer
| project-away TimeGenerated
| sort by Free_MB asc

//LA - showing how Union works across 2 different workspaces (up to 100)
union Event,
//customerA
workspace("workspaceid_customerA").Event,
//customerB
workspace("workspaceid_customerB").Event
| where EventLevelName == "Error"
| project TimeGenerated, Computer, RenderedDescription

//ARG - Show VM in stopped state (instead of deallocated = burning money)
resources | where type == "microsoft.compute/virtualmachines"
| extend vmState = tostring(properties.extended.instanceView.powerState.displayStatus)
| where vmState == "VM stopped"
| project subscriptionId, resourceGroup, name, vmState, vmSize=properties.hardwareProfile.vmSize, properties

//ARG - Show various AVD related items and whether a scaling plan is enabled
resources
| where type == 'microsoft.desktopvirtualization/scalingplans'
| mv-expand parse_json(properties.hostPoolReferences)
| extend hostPoolId=properties_hostPoolReferences.hostPoolArmPath
| extend hostpoolName = tostring(split(hostPoolId,'/')[(-1)])
| project subscriptionId, resourceGroup, ScalingPlanname=name, scalingPlanEnabled=properties_hostPoolReferences.scalingPlanEnabled, hostpoolName
| join kind= inner (
resources 
| where type == 'microsoft.desktopvirtualization/hostpools' 
| extend hostpoolName=name
| project subscriptionId, hostpoolName, resourceGroup, hostPoolType=properties.hostPoolType, maxsessionLimit=properties.maxSessionLimit, startVMOnConnect=properties.startVMOnConnect, customRdpProperty=properties.customRdpProperty
) on hostpoolName
| project-away subscriptionId1, hostpoolName1, resourceGroup1

